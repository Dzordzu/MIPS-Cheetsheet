.data 
i_ADD: .asciiz "ADD"
i_ADDI: .asciiz "ADDI"
i_J: .asciiz "J"
i_NOOP: .asciiz "NOOP"
i_MULT: .asciiz "MULT"
i_JR: .asciiz "JR"
i_JAL: .asciiz "JAL"

buffer_input: .space 64
buffer_str_word: .space 64
buffer_2: .space 64
buffer_param_1: .space 64
buffer_param_2: .space 64
buffer_param_3: .space 64

ascii_enter_command: .asciiz "Please enter the command: \n"
ascii_wrong_input: .asciiz "Wrong input. Please reenter the command\n"
ascii_end_program: .asciiz "This is the end"
ascii_start_program: .asciiz "Enter commands amount: "
stack_bottom_flag: .asciiz "STACKBOTTOMFLAG"
allocated_bytes: .word 0
ascii_reversed_stack: .asciiz "Reversed stack: \n "

.data
	# Useful for debugging and logging
	newline: .asciiz "\n"
	ascii_space: .asciiz  " "
	
	ascii_arrow: .asciiz " -> "
	ascii_long_arrow: .asciiz " ---> "
	
	ascii_plus: .asciiz " + "
	ascii_minus: .asciiz " - "
	ascii_multipicate: .asciiz " * "
	ascii_divide: .asciiz " / "
	ascii_power: .asciiz "^"
	
	ascii_equals: .asciiz " = "
	ascii_less: .asciiz " < "
	ascii_less_eq: .asciiz " <= "
	ascii_greater: .asciiz " > "
	ascii_greater_eq: .asciiz " >= "
	
	ascii_versus: .asciiz " vs "
	ascii_and: .asciiz " and "
	ascii_or: .asciiz " or "

###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

.macro PRINT (%message)
        addiu $sp, $sp, -8
        sw $v0, 4($sp)
        sw $a0, 0($sp)

        li $v0, 4
        la $a0, %message
        syscall

        lw $a0, 0($sp)
        lw $v0, 4($sp)
        addiu $sp, $sp, 8
.end_macro

.macro base_numeric_PRINT (%code, %value)
        addiu $sp, $sp, -8
        sw $v0, 4($sp)
        sw $a0, 0($sp)

        li $v0, %code 
        addu $a0, $zero, %value
        syscall

        lw $a0, 0($sp)
        lw $v0, 4($sp)
        addiu $sp, $sp, 8
.end_macro

.macro PRINT_REG (%message)
	base_numeric_PRINT (4, %message)
.end_macro

.macro PRINT_WORD (%message)
	base_numeric_PRINT (1, %message)
.end_macro

.macro PRINT_CHAR (%message)
	base_numeric_PRINT (11, %message)
.end_macro

.macro PRINT_BYTE (%message)
	base_numeric_PRINT (1, %message)
.end_macro


###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

.macro LENGTH
	addiu $sp, $sp, -4
	sw $t0, 0($sp)

	li $v0, 0
counter:
	lb $t0, ($a0)
	beqz $t0, end
	add $a0, $a0, 1
	add $v0, $v0, 1
	j counter	
end:
	lw $t0, 0($sp)
	addiu $sp, $sp, 4
.end_macro 

.macro LENGTH (%str)
	la $a0, %str
	LENGTH
.end_macro

###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

# Returns
# 	v0 - pointer
# 	v1 - position (relative to the a0 pointer)
.macro FIND (%symbol) 
	addiu $sp, $sp, -8
	sw $t0, 0($sp)
	sw $t1, 4($sp)
	li $v1, 0
loop:
	lb $t0, ($a0)
	
	seq $t1, $t0 $zero
	bnez $t1, end
	
	
	add $t1, $zero, %symbol
	seq $t1, $t0, $t1
	bnez $t1, end
	
	addiu $a0, $a0, 1
	addiu $v1, $v1, 1
	
	j loop
end:
	move $v0, $a0
	lw $t1, 4($sp)
	lw $t0, 0($sp)
	addiu $sp, $sp, 8
.end_macro

###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

.macro COMPARE_STR

	addiu $sp, $sp, -8
	sw $t0, 0($sp)
	sw $t1, 4($sp)

	li $v0, 1
	addiu $a0, $a0, -1
	addiu $a1, $a1, -1		
loop:
	# ptr[a0]++ ptr[a1]++
	addiu $a0, $a0, 1
	addiu $a1, $a1, 1
	
	lb $t0, ($a0)
	lb $t1, ($a1)
	
	# if(a0 == 0 || a1 == 0) goto equalZero
	seq $t0, $t0, $zero
	seq $t1, $t1, $zero
	or $t0, $t0, $t1
	bne $t0, $zero, equalZero
	
	lb $t0, ($a0)
	lb $t1, ($a1)
	
	# if(a0 != a1)
	bne $t0, $t1, notEqual
	# else goto loop
	j loop
	
equalZero:
	lb $t0, ($a0)
	lb $t1, ($a1)
	
	# if(a0 == 0 && a1 == 0) OK
	# else NOT OK	
	seq $t0, $t0, $zero
	seq $t1, $t1, $zero
	and $t0, $t0, $t1
	bne $t0, $zero, end
notEqual:
	li $v0, 0
end:
	lw $t1, 4($sp)
	lw $t0, 0($sp)
	addiu $sp, $sp, 8
.end_macro

###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

.macro COMPARE_STR (%str1, %str2)
	la $a0, %str1
	la $a1, %str2
	COMPARE_STR
.end_macro

###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

.macro COPY_ASCII (%size)

	addiu $sp, $sp, -8
	sw $t0, 0($sp)
	sw $t1, 4($sp) 

	# Init iterations
	add $t0, $zero, %size
	

loop:
	# Check iterations
	add $t0, $t0, -1
	bltz $t0, end
	
	# Load value
	lb $t1, ($a0)
	beqz $t1, end
	sb $t1 ($a1)
	addiu $a0, $a0, 1
	addiu $a1, $a1, 1
	j loop
end:
	sb $zero, ($a1)
	lw $t1, 4($sp)
	lw $t0, 0($sp)
	addiu $sp, $sp, 8
.end_macro

.macro COPY_ASCII (%src, %trg, %size)
	la $a0, %src
	la $a1, %trg
	COPY_ASCII %size
.end_macro

###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

# Dependcies:
#	macros/strings/basic.asm (FIND sign)
.macro COPY_ASCII_TO_SIGN_EXCLUSIVE (%sign)
	addiu $sp, $sp, -4
	sw $t0, ($sp)

	move $t0, $a0
	FIND %sign 
	move $a0, $t0
	
	move $t0, $v1
	COPY_ASCII $t0

	lw $t0, ($sp)
	addiu $sp, $sp, 4
.end_macro

###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

.macro COPY_ASCII_TO_SIGN_EXCLUSIVE (%src, %trg, %sign)
	la $a0, %src
	la $a1, %trg
	COPY_ASCII_TO_SIGN_EXCLUSIVE (%sign)
.end_macro 	

###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

.macro INPUT (%buffer, %maxSize)

        addiu $sp, $sp, -8
        sw $a0, 4($sp)
        sw $a1, 0($sp)

	li $v0, 8
        la $a0, %buffer
        add $a1, $zero, %maxSize
        syscall
        
        lw $a1, 0($sp)
        lw $a0, 4($sp)
        addiu $sp, $sp, 8

.end_macro

.macro INPUT_WORD
	li $v0, 5
        syscall
.end_macro

###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

.macro IN_IMMEDIATE_EXCLUSIVE_RANGE(%min, %max)

	# Ensure $t1 is safe
	addiu $sp, $sp -4
	sw $t1, ($sp)

	# Check if greater than
	li $t1, %min
	slt $v1,$t1, $a0
	
	# Check if smaller than
	li $t1 %max
	slt $t1, $a0, $t1
	
	# Make it works
	and $v1, $v1, $t1
	
	# Reload original $t1 value
	lw $t1, ($sp)
	addiu $sp, $sp, 4
.end_macro

###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

.macro IS_LETTER
	addiu $sp, $sp, -4
	sw $t0, ($sp)
	
	IN_IMMEDIATE_EXCLUSIVE_RANGE(96, 123)
	move $t0, $v1
	IN_IMMEDIATE_EXCLUSIVE_RANGE(64, 91)
	or $v0, $v1, $t0
	
	lw $t0, ($sp)
	addiu $sp, $sp, 4
.end_macro

.macro IS_LETTER (%code)
	lb $a0, %code
	IS_LETTER
.end_macro 


.macro IS_NUMBER
	IN_IMMEDIATE_EXCLUSIVE_RANGE(47, 58)
	move $v0, $v1
.end_macro

.macro IS_NUMBER (%code)
	lb $a0, %code
	IS_NUMBER
.end_macro 

###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

.macro STRING_TO_INT
	addiu $sp, $sp, -12
	sw $t0, ($sp)
	sw $t1, 4($sp)
	sw $t9, 8($sp)
	
	move $a1, $a0
	
	li $t9, 0
loop:
	lb $a0, ($a1)
	beqz $a0, complete
	IS_NUMBER
	beqz $v0, not_complete
	addi $a0, $a0, -48
	mul $t9, $t9, 10
	add $t9, $t9, $a0
	addiu $a1, $a1, 1
	j loop
not_complete:
	li $v1, 0
	j end
complete:
	li $v1, 1
	j end
end:
 	move $v0, $t9
 	
 	lw $t9, 8($sp)
	lw $t1, 4($sp)
	lw $t0, ($sp)
	addiu $sp, $sp, 12
.end_macro

###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

.macro STRING_TO_INT (%string)
	la $a0, %string
	STRING_TO_INT
.end_macro 

###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

.macro VALIDATE_IMMEDIATE
	addiu $sp, $sp, -4
	sw $t0, ($sp)
	
	la $t0, buffer_str_word
first:
	lb $a0, ($t0)
	IS_NUMBER
	seq $a0, $a0, '-'
	or $a0, $v0, $a0
	beqz $a0, notok
other:
	add $t0, $t0, 1
	lb $a0, ($t0)
	beqz $a0, ok
	IS_NUMBER
	beqz $v0, notok
	j other
notok:
	li $v0, 0
	j end
ok:
	li $v1, 0
	j end
end:
	lw $t0, ($sp)
	addiu $sp, $sp, 4
.end_macro 

###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

.macro VALIDATE_REGISTER

	addiu $sp, $sp, -12
	sw $t0, ($sp)
	sw $t1, 4($sp)
	sw $t9, 8($sp)

	la $a0, buffer_str_word
	li $t9, 1
first:
	lb $t0, ($a0)
	bne $t0, '$', falsy
others:
	addiu $a0, $a0, 1
	lb $t0, ($a0)
	beqz $t0, falsy
	STRING_TO_INT
	beqz $v1, falsy
	
	move $a0, $v0
	IN_IMMEDIATE_EXCLUSIVE_RANGE(-1, 32)
	beqz $v1, falsy
	
	j end
falsy:
	li $t9, 0
end:
	move $v0, $t9
	
	lw $t9, 8($sp)
	lw $t1, 4($sp)
	lw $t0, ($sp)
	addiu $sp, $sp, 12
.end_macro


###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

.macro VALIDATE_LABEL
	addiu $sp, $sp, -12
	sw $t0, ($sp)
	sw $t1, 4($sp)
	sw $t9, 8($sp)
	
	la $t0, buffer_str_word
	li $t9, 1
first:
	lb $a0, ($t0)
	IS_LETTER
	beqz $v0, falsy
others:
	addiu $t0, $t0, 1
	lb $a0, ($t0)
	
	beqz $a0, end
	
	IS_LETTER
	move $t1, $v0
	IS_NUMBER
	or $v0, $v0, $t1
	beqz $v0, falsy
	
	j others
falsy:
	li $t9, 0
end:
	move $v0, $t9
	
	lw $t9, 8($sp)
	lw $t1, 4($sp)
	lw $t0, ($sp)
	addiu $sp, $sp, 12
.end_macro


###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################


# v0 - emoty() ? 0 : 1
.macro PARSE_FROM_INPUT_BUFFER
	addiu $sp,$sp, -4
	sw $t1, ($sp)
	
	la $a0, buffer_input
	FIND ' '
	move $t1, $v0
	
	la $a0, buffer_input
	LENGTH
	beqz $v0, end
	
	bge $v1, $v0, last # v1 is from FIND
	
	la $a0, buffer_input
	la $a1, buffer_str_word
	COPY_ASCII_TO_SIGN_EXCLUSIVE ' '
	
	
	move $a0, $t1
	addiu $a0, $a0, 1
	la $a1, buffer_2
	COPY_ASCII 64
	
	la $a0, buffer_2
	la $a1, buffer_input
	COPY_ASCII 64
	
	j end

last:
	la $a0, buffer_input
	la $a1, buffer_str_word
	COPY_ASCII_TO_SIGN_EXCLUSIVE '\n'
	
	sb $zero, buffer_input
	j end
end:
	lw $t1, ($sp)
	addiu $sp, $sp, 4
.end_macro

###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

.macro ADD_ALLOCATED_BYTES (%bytes)
	addiu $sp, $sp, -4
	sw $t8, ($sp)
	
	lw $t8, allocated_bytes
	addu $t8, $t8, %bytes
	sw $t8, allocated_bytes 
	
	lw $t8, ($sp)
	addiu $sp, $sp, 4
.end_macro


###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

# a0 - string pointer
.macro ADD_TO_STACK
	move $a1, $a0
	LENGTH
	addiu $sp, $sp, -64
	ADD_ALLOCATED_BYTES $v0
	
	move $a0, $a1
	la $a1, ($sp)
	COPY_ASCII 63
	
.end_macro

.macro ADD_SPACE_TO_STACK
	addiu $sp, $sp, -64
	la $a0, ascii_space
	la $a1, ($sp)
	COPY_ASCII 63
.end_macro 

.macro ADD_NEWLINE_TO_STACK
	addiu $sp, $sp, -64
	la $a0, newline
	la $a1, ($sp)
	COPY_ASCII 63
.end_macro 


###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

.data
t0: "\nt0 = "

.macro PRINT_FROM_STACK

loop:
	move $a0, $sp
	la $a1, stack_bottom_flag
	COMPARE_STR 
	bnez $v0, end
	move $t7, $a0
	PRINT_REG $t7
	addiu $sp, $sp, 64
	j loop
end:
	addiu $sp, $sp, 64

.end_macro

# t0 - iterator

.text
	PRINT ascii_start_program
	INPUT_WORD
	move $t0, $v0
	addiu $t0, $t0, 1
stackBottom: 
	addiu $sp, $sp, -64
	la $a0, stack_bottom_flag
	move $a1, $sp
	COPY_ASCII 63
	
	move $a0, $sp
	la $a1, stack_bottom_flag
	COMPARE_STR
	move $a0, $v0
	PRINT_BYTE $a0
loop:
	addiu $t0, $t0, -1
	
	# PRINT t0
	# PRINT_WORD $t0
	# PRINT newline
	
	beqz $t0, end
	
	PRINT newline
	PRINT ascii_enter_command
	INPUT buffer_input, 63
parseName:
	PARSE_FROM_INPUT_BUFFER
	
	COMPARE_STR buffer_str_word, i_ADD
	move $t1, $v0
	bnez $t1, cADD
	
	COMPARE_STR buffer_str_word, i_ADDI
	move $t1, $v0
	bnez $t1, cADDI
	
	COMPARE_STR buffer_str_word, i_J
	move $t1, $v0
	bnez $t1, cJ	
	
	COMPARE_STR buffer_str_word, i_NOOP
	move $t1, $v0
	bnez $t1, cNOOP
	
	COMPARE_STR buffer_str_word, i_MULT
	move $t1, $v0
	bnez $t1, cMULT
	
	COMPARE_STR buffer_str_word, i_JR
	move $t1, $v0
	bnez $t1, cJR
	
	COMPARE_STR buffer_str_word, i_JAL
	move $t1, $v0
	bnez $t1, cJAL
	
	j wrongInput
cADD: 
	LENGTH buffer_input
	beqz $v0, wrongInput
	
	PARSE_FROM_INPUT_BUFFER
	VALIDATE_REGISTER
	beqz $v0, wrongInput
	
	COPY_ASCII buffer_str_word buffer_param_1, 64
	
	LENGTH buffer_input
	beqz $v0, wrongInput
	
	PARSE_FROM_INPUT_BUFFER
	VALIDATE_REGISTER
	beqz $v0, wrongInput
	
	COPY_ASCII buffer_str_word buffer_param_2, 64
	
	LENGTH buffer_input
	beqz $v0, wrongInput
	
	PARSE_FROM_INPUT_BUFFER
	VALIDATE_REGISTER
	beqz $v0, wrongInput
	
	COPY_ASCII buffer_str_word buffer_param_3, 64
	
	LENGTH buffer_input
	bnez $v0, wrongInput
	
	ADD_NEWLINE_TO_STACK
	la $a0, buffer_param_3
	ADD_TO_STACK
	ADD_SPACE_TO_STACK
	la $a0, buffer_param_2
	ADD_TO_STACK
	ADD_SPACE_TO_STACK
	la $a0, buffer_param_1
	ADD_TO_STACK
	ADD_SPACE_TO_STACK
	la $a0, i_ADD
	ADD_TO_STACK
	
	j loop
	
	
cADDI: 
	LENGTH buffer_input
	beqz $v0, wrongInput
	
	PARSE_FROM_INPUT_BUFFER
	VALIDATE_REGISTER
	beqz $v0, wrongInput
	
	COPY_ASCII buffer_str_word buffer_param_1, 64
	
	LENGTH buffer_input
	beqz $v0, wrongInput
	
	PARSE_FROM_INPUT_BUFFER
	VALIDATE_REGISTER
	beqz $v0, wrongInput
	
	COPY_ASCII buffer_str_word buffer_param_2 64
	
	LENGTH buffer_input
	beqz $v0, wrongInput
	
	PARSE_FROM_INPUT_BUFFER
	VALIDATE_IMMEDIATE
	beqz $v0, wrongInput
	
	COPY_ASCII buffer_str_word buffer_param_3, 64
	
	LENGTH buffer_input
	bnez $v0, wrongInput
	
	ADD_NEWLINE_TO_STACK
	la $a0, buffer_param_3
	ADD_TO_STACK
	ADD_SPACE_TO_STACK
	la $a0, buffer_param_2
	ADD_TO_STACK
	ADD_SPACE_TO_STACK
	la $a0, buffer_param_1
	ADD_TO_STACK
	ADD_SPACE_TO_STACK
	la $a0, i_ADDI
	ADD_TO_STACK
	
	j loop
	
	
cJR: 
	LENGTH buffer_input
	beqz $v0, wrongInput
	
	PARSE_FROM_INPUT_BUFFER
	VALIDATE_REGISTER
	beqz $v0, wrongInput
	
	COPY_ASCII buffer_str_word buffer_param_1, 64
	
	LENGTH buffer_input
	bnez $v0, wrongInput
	
	ADD_NEWLINE_TO_STACK
	la $a0, buffer_param_1
	ADD_TO_STACK
	ADD_SPACE_TO_STACK
	la $a0, i_JR
	ADD_TO_STACK
	
	
	j loop
	
	
cNOOP: 
	LENGTH buffer_input
	bnez $v0, wrongInput
	
	ADD_NEWLINE_TO_STACK
	
	la $a0, i_NOOP
	ADD_TO_STACK

	
	j loop
	
	
cMULT: 
	LENGTH buffer_input
	beqz $v0, wrongInput
	
	PARSE_FROM_INPUT_BUFFER
	VALIDATE_REGISTER
	beqz $v0, wrongInput
	
	COPY_ASCII buffer_str_word buffer_param_1, 64
	
	LENGTH buffer_input
	beqz $v0, wrongInput
	
	PARSE_FROM_INPUT_BUFFER
	VALIDATE_REGISTER
	beqz $v0, wrongInput
	
	COPY_ASCII buffer_str_word buffer_param_2, 64
	
	LENGTH buffer_input
	bnez $v0, wrongInput
	
	ADD_NEWLINE_TO_STACK
	la $a0, buffer_param_2
	ADD_TO_STACK
	ADD_SPACE_TO_STACK
	la $a0, buffer_param_1
	ADD_TO_STACK
	ADD_SPACE_TO_STACK
	la $a0, i_MULT
	ADD_TO_STACK
	
	
	j loop

cJ: 
cJAL: 
	COPY_ASCII buffer_str_word buffer_param_2, 64 # XD
	LENGTH buffer_input
	beqz $v0, wrongInput
	
	PARSE_FROM_INPUT_BUFFER
	VALIDATE_LABEL
	beqz $v0, wrongInput
	
	COPY_ASCII buffer_str_word buffer_param_1, 64
	
	LENGTH buffer_input
	bnez $v0, wrongInput
	
	ADD_NEWLINE_TO_STACK
	la $a0, buffer_param_1
	ADD_TO_STACK
	ADD_SPACE_TO_STACK
	la $a0, buffer_param_2 # XD
	ADD_TO_STACK
	
	j loop
	
	
wrongInput:
	PRINT ascii_wrong_input
	addiu $t0, $t0, 1
	j loop
	
	
end:
	PRINT newline
	PRINT ascii_reversed_stack
	PRINT_FROM_STACK
	PRINT newline
	
	lw $t7, allocated_bytes
	PRINT_WORD $t7
	
	PRINT newline
	PRINT ascii_end_program
