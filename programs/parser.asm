.data 
i_ADD: .asciiz "ADD"
i_ADDI: .asciiz "ADDI"
i_J: .asciiz "J"
i_NOOP: .asciiz "NOOP"
j_MULT: .asciiz "MULT"
j_JR: .asciiz "JR"
j_JAL: .asciiz "JAL"

buffer_input: .space 256
buffer_str_word: .space 256
buffer_2: .space 256
allocated_bytes: .word 0

.data
	# Useful for debugging and logging
	newline: .asciiz "\n"
	ascii_space: .asciiz  " "
	
	ascii_arrow: .asciiz " -> "
	ascii_long_arrow: .asciiz " ---> "
	
	ascii_plus: .asciiz " + "
	ascii_minus: .asciiz " - "
	ascii_multipicate: .asciiz " * "
	ascii_divide: .asciiz " / "
	ascii_power: .asciiz "^"
	
	ascii_equals: .asciiz " = "
	ascii_less: .asciiz " < "
	ascii_less_eq: .asciiz " <= "
	ascii_greater: .asciiz " > "
	ascii_greater_eq: .asciiz " >= "
	
	ascii_versus: .asciiz " vs "
	ascii_and: .asciiz " and "
	ascii_or: .asciiz " or "

###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

.macro PRINT (%message)
        addiu $sp, $sp, -8
        sw $v0, 4($sp)
        sw $a0, 0($sp)

        li $v0, 4
        la $a0, %message
        syscall

        lw $a0, 0($sp)
        lw $v0, 4($sp)
        addiu $sp, $sp, 8
.end_macro

.macro base_numeric_PRINT (%code, %value)
        addiu $sp, $sp, -8
        sw $v0, 4($sp)
        sw $a0, 0($sp)

        li $v0, %code 
        addu $a0, $zero, %value
        syscall

        lw $a0, 0($sp)
        lw $v0, 4($sp)
        addiu $sp, $sp, 8
.end_macro

.macro PRINT_REG (%message)
	base_numeric_PRINT (4, %message)
.end_macro

.macro PRINT_WORD (%message)
	base_numeric_PRINT (1, %message)
.end_macro

.macro PRINT_CHAR (%message)
	base_numeric_PRINT (11, %message)
.end_macro

.macro PRINT_BYTE (%message)
	base_numeric_PRINT (1, %message)
.end_macro


###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

.macro LENGTH
	addiu $sp, $sp, -4
	sw $t0, 0($sp)

	li $v0, 0
counter:
	lb $t0, ($a0)
	beqz $t0, end
	add $a0, $a0, 1
	add $v0, $v0, 1
	j counter	
end:
	lw $t0, 0($sp)
	addiu $sp, $sp, 4
.end_macro 

###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

# Returns
# 	v0 - pointer
# 	v1 - position (relative to the a0 pointer)
.macro FIND (%symbol) 
	addiu $sp, $sp, -8
	sw $t0, 0($sp)
	sw $t1, 4($sp)
	li $v1, 0
loop:
	lb $t0, ($a0)
	
	seq $t1, $t0 $zero
	bnez $t1, end
	
	
	add $t1, $zero, %symbol
	seq $t1, $t0, $t1
	bnez $t1, end
	
	addiu $a0, $a0, 1
	addiu $v1, $v1, 1
	
	j loop
end:
	move $v0, $a0
	lw $t1, 4($sp)
	lw $t0, 0($sp)
	addiu $sp, $sp, 8
.end_macro

###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

.macro COMPARE_STR

	addiu $sp, $sp, -8
	sw $t0, ($sp)
	sw $t1, 4($sp)

	li $v0, 1
	addiu $a0, $a0, -1
	addiu $a1, $a1, -1		
loop:
	# ptr[a0]++ ptr[a1]++
	addiu $a0, $a0, 1
	addiu $a1, $a1, 1
	
	lb $t0, ($a0)
	lb $t1, ($a1)
	
	# if(a0 == 0 || a1 == 0) goto equalZero
	seq $t0, $t0, $zero
	seq $t1, $t1, $zero
	or $t0, $t0, $t1
	bne $t0, $zero, equalZero
	
	lb $t0, ($a0)
	lb $t1, ($a1)
	
	# if(a0 != a1)
	bne $t0, $t1, notEqual
	# else goto loop
	j loop
	
equalZero:
	lb $t0, ($a0)
	lb $t1, ($a1)
	
	# if(a0 == 0 && a1 == 0) OK
	# else NOT OK	
	seq $t0, $t0, $zero
	seq $t1, $t1, $zero
	and $t0, $t0, $t1
	bne $t0, $zero, end
notEqual:
	li $v0, 0
end:
	lw $t1, 4($sp)
	lw $t0, 4($sp)
	addiu $sp, $sp, 8
.end_macro

###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

.macro COMPARE_STR (%str1, %str2)
	la $a0, %str1
	la $a1, %str2
	COMPARE_STR
.end_macro

###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

.macro COPY_ASCII (%size)

	addiu $sp, $sp, -8
	sw $t0, ($sp)
	sw $t1, 4($sp) 

	# Init iterations
	add $t0, $zero, %size
	

loop:
	# Check iterations
	add $t0, $t0, -1
	bltz $t0, end
	
	# Load value
	lb $t1, ($a0)
	beqz $t1, end
	sb $t1 ($a1)
	addiu $a0, $a0, 1
	addiu $a1, $a1, 1
	j loop
end:
	sb $zero, ($a1)
	lw $t1, 4($sp)
	lw $t0, ($sp)
	addiu $sp, $sp, 8
.end_macro

.macro COPY_ASCII (%src, %trg, %size)
	la $a0, %src
	la $a1, %trg
	COPY_ASCII %size
.end_macro

###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

# Dependcies:
#	macros/strings/basic.asm (FIND sign)
.macro COPY_ASCII_TO_SIGN_EXCLUSIVE (%sign)
	addiu $sp, $sp, -4
	sw $t0, ($sp)

	move $t0, $a0
	FIND %sign 
	move $a0, $t0
	
	move $t0, $v1
	COPY_ASCII $t0

	lw $t0, ($sp)
	addiu $sp, $sp, 4
.end_macro

###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

.macro COPY_ASCII_TO_SIGN_EXCLUSIVE (%src, %trg, %sign)
	la $a0, %src
	la $a1, %trg
	COPY_ASCII_TO_SIGN_EXCLUSIVE (%sign)
.end_macro 	

###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

.macro INPUT (%buffer, %maxSize)

        addiu $sp, $sp, -8
        sw $a0, 4($sp)
        sw $a1, 0($sp)

	li $v0, 8
        la $a0, %buffer
        add $a1, $zero, %maxSize
        syscall
        
        lw $a1, 0($sp)
        lw $a0, 4($sp)
        addiu $sp, $sp, 8

.end_macro

.macro INPUT_WORD
	li $v0, 5
        syscall
.end_macro

###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################
###################################################################################

.macro PARSE_FROM_INPUT_BUFFER
	addiu $sp,$sp, -4
	sw $t1, ($sp)
	
	la $a0, buffer_input
	la $a1, buffer_str_word
	COPY_ASCII_TO_SIGN_EXCLUSIVE ' '
	
	la $a0, buffer_input
	FIND ' '
	
	move $a0, $v0
	addiu $a0, $a0, 1
	la $a1, buffer_2
	COPY_ASCII 256
	
	la $a0, buffer_2
	la $a1, buffer_input
	COPY_ASCII 256
	
	lw $t1, ($sp)
	addiu $sp, $sp, 4
.end_macro


# t0 - iterator

.text
	INPUT_WORD
	move $t0, $v0
	
loop:

	INPUT buffer_input, 255
parseName:
	PARSE_FROM_INPUT_BUFFER
	PARSE_FROM_INPUT_BUFFER
	PRINT buffer_input